<%init>

delete $ENV{REQUEST_METHOD};
my @params = ( );

# Spam filtering on page save request

if ($ARGS{Save} eq 'Save' or $ARGS{oldtime} ne "") {
    if (PageCapt::Web::ratespam($ARGS{text}) > 4) {
	%ARGS = ();
	$ARGS{action} = 'browse';
	$ARGS{id} = 'SpamScold';
    }
    elsif (not $User->isvalid) {
        %ARGS = ();
	$ARGS{action} = 'browse';
	$ARGS{id} = 'PermDenied';
    }

}

# Private namespace
if ($ARGS{id} =~ /^Private/ || $ARGS{keywords} =~ /^Private/ and not $User->isvalid) {
    %ARGS = ();
    $ARGS{action} = 'browse';
    $ARGS{id} = 'PermDenied';
}

foreach my $arg (keys %ARGS) {
  push @params, $arg . "=" . 
    $m->interp->apply_escapes( $ARGS{$arg}, 'u' );
}

# "Safe-pipe" method

my $pid = open(WIKI, "-|");
unless ($pid) { exec("perl", "wiki.pl", @params); }

my @lines = <WIKI>;
my $output = join("", @lines);

my ( $cookie ) = ( $output =~ m{Set-Cookie: (.*)$}mi );
$r->header_out( 'Set-Cookie' => $cookie) if $cookie;

$output =~ s{mason_handler.pl}{wiki.mhtml}g;
$output =~ s{^.*?<body[^>]*>}{}si;
$output =~ s{</body.*$}{}si;

</%init>
<% $output %>

<%method title>
Deleuzean Wiki: Fist
</%method>
